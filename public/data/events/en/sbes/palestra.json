[
  {
    "speakers": ["lionel-briand"],
    "title": "Wednesday, September 24th 2025<br>Automated Testing and Safety Analysis of Deep Learning Systems ",
    "abstract": "Software engineering has long sought ways to enhance software testing to ensure that critical software is reliable before deployment. The advent of deep learning (DL) software has disrupted traditional testing and analysis practices, prompting the creation of specialized methods and techniques to address the unique challenges posed by DL. This is particularly crucial in critical systems with safety implications for users and the environment. This presentation will share findings from several years of research on the automation and practical testing of DL models and DL-enabled systems. It will also discuss testing-based safety analysis as an important application of testing. "
  },
  {
    "speakers": ["sarah-nadi"],
    "title": "Thursday, September 25th 2025<br>Software Dependencies: Then, Now, and Beyond ",
    "abstract": "Modern software development heavily relies on third-party libraries. While these dependencies accelerate development, they introduce their own set of challenges. In this talk, I will explore three common hurdles developers face and the techniques and tools that we have built to address them: comparing and selecting libraries, avoiding API misuse, and migrating to newer library versions or entirely different libraries. <br>Then we will fast-forward to todayâ€™s reality: the growing and pervasive reliance on Large Language Models (LLMs). While LLMs are helping to alleviate some of the above challenges, new advances are also redefining software dependencies and how we can ensure their correct usage, opening the door to a new set of challenges we are only beginning to understand "
  },
  {
    "speakers": ["rohit-gheyi"],
    "title": "Friday, September 26th 2025<br>Refactoring: Challenges, Lessons, and AI Opportunities ",
    "abstract": "Refactoring, a term introduced in the early 1990s, has become an integral part of modern software development, widely used to improve code structure while preserving behavior. However, ensuring the correctness of automated refactorings remains a challenge. In this talk, I will revisit both foundational and recent approaches to making refactoring safer, drawing on strategies such as testing, change-impact analysis, and formal verification. I will highlight contributions from our research group over the past two decades that uncovered hundreds of bugs in major IDEs. Finally, I will explore to what extent foundation models may help reshaping the landscape of software refactoring "
  }
]
